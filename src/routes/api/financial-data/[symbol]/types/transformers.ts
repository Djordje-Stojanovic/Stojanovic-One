import type { FMPIncomeStatement, FMPBalanceSheet, FMPCashFlowStatement } from './fmpTypes';
import type { IncomeStatement, BalanceSheet, CashFlowStatement } from '$lib/types/financialStatements';

function safeNumber(value: unknown): number {
    if (value === null || value === undefined || value === '') return 0;
    const num = Number(value);
    return isNaN(num) ? 0 : Number(num.toFixed(2));
}

export function transformIncomeStatement(stmt: FMPIncomeStatement, symbol: string, convertedStmt: FMPIncomeStatement): IncomeStatement {
    return {
        symbol,
        date: stmt.date,
        reported_currency: stmt.reportedCurrency,
        cik: stmt.cik,
        filling_date: stmt.fillingDate,
        accepted_date: stmt.acceptedDate,
        calendar_year: stmt.calendarYear,
        period: stmt.period,
        link: stmt.link,
        final_link: stmt.finalLink,
        revenue: safeNumber(convertedStmt.revenue),
        cost_of_revenue: safeNumber(convertedStmt.costOfRevenue),
        gross_profit: safeNumber(convertedStmt.grossProfit),
        gross_profit_ratio: safeNumber(stmt.grossProfitRatio),
        research_and_development_expenses: safeNumber(convertedStmt.researchAndDevelopmentExpenses),
        general_and_administrative_expenses: safeNumber(convertedStmt.generalAndAdministrativeExpenses),
        selling_and_marketing_expenses: safeNumber(convertedStmt.sellingAndMarketingExpenses),
        selling_general_and_administrative_expenses: safeNumber(convertedStmt.sellingGeneralAndAdministrativeExpenses),
        other_expenses: safeNumber(convertedStmt.otherExpenses),
        operating_expenses: safeNumber(convertedStmt.operatingExpenses),
        cost_and_expenses: safeNumber(convertedStmt.costAndExpenses),
        interest_income: safeNumber(convertedStmt.interestIncome),
        interest_expense: safeNumber(convertedStmt.interestExpense),
        depreciation_and_amortization: safeNumber(convertedStmt.depreciationAndAmortization),
        ebitda: safeNumber(convertedStmt.ebitda),
        ebitda_ratio: safeNumber(stmt.ebitdaratio),
        operating_income: safeNumber(convertedStmt.operatingIncome),
        operating_income_ratio: safeNumber(stmt.operatingIncomeRatio),
        total_other_income_expenses_net: safeNumber(convertedStmt.totalOtherIncomeExpensesNet),
        income_before_tax: safeNumber(convertedStmt.incomeBeforeTax),
        income_before_tax_ratio: safeNumber(stmt.incomeBeforeTaxRatio),
        income_tax_expense: safeNumber(convertedStmt.incomeTaxExpense),
        net_income: safeNumber(convertedStmt.netIncome),
        net_income_ratio: safeNumber(stmt.netIncomeRatio),
        eps: safeNumber(stmt.eps),
        eps_diluted: safeNumber(stmt.epsdiluted),
        weighted_average_shs_out: safeNumber(stmt.weightedAverageShsOut),
        weighted_average_shs_out_dil: safeNumber(stmt.weightedAverageShsOutDil)
    };
}

export function transformBalanceSheet(stmt: FMPBalanceSheet, symbol: string, convertedStmt: FMPBalanceSheet): BalanceSheet {
    return {
        symbol,
        date: stmt.date,
        reported_currency: stmt.reportedCurrency,
        cik: stmt.cik,
        filling_date: stmt.fillingDate,
        accepted_date: stmt.acceptedDate,
        calendar_year: stmt.calendarYear,
        period: stmt.period,
        link: stmt.link,
        final_link: stmt.finalLink,
        cash_and_cash_equivalents: safeNumber(convertedStmt.cashAndCashEquivalents),
        short_term_investments: safeNumber(convertedStmt.shortTermInvestments),
        cash_and_short_term_investments: safeNumber(convertedStmt.cashAndShortTermInvestments),
        net_receivables: safeNumber(convertedStmt.netReceivables),
        inventory: safeNumber(convertedStmt.inventory),
        other_current_assets: safeNumber(convertedStmt.otherCurrentAssets),
        total_current_assets: safeNumber(convertedStmt.totalCurrentAssets),
        property_plant_equipment_net: safeNumber(convertedStmt.propertyPlantEquipmentNet),
        goodwill: safeNumber(convertedStmt.goodwill),
        intangible_assets: safeNumber(convertedStmt.intangibleAssets),
        goodwill_and_intangible_assets: safeNumber(convertedStmt.goodwillAndIntangibleAssets),
        long_term_investments: safeNumber(convertedStmt.longTermInvestments),
        tax_assets: safeNumber(convertedStmt.taxAssets),
        other_non_current_assets: safeNumber(convertedStmt.otherNonCurrentAssets),
        total_non_current_assets: safeNumber(convertedStmt.totalNonCurrentAssets),
        other_assets: safeNumber(convertedStmt.otherAssets),
        total_assets: safeNumber(convertedStmt.totalAssets),
        account_payables: safeNumber(convertedStmt.accountPayables),
        short_term_debt: safeNumber(convertedStmt.shortTermDebt),
        tax_payables: safeNumber(convertedStmt.taxPayables),
        deferred_revenue: safeNumber(convertedStmt.deferredRevenue),
        other_current_liabilities: safeNumber(convertedStmt.otherCurrentLiabilities),
        total_current_liabilities: safeNumber(convertedStmt.totalCurrentLiabilities),
        long_term_debt: safeNumber(convertedStmt.longTermDebt),
        deferred_revenue_non_current: safeNumber(convertedStmt.deferredRevenueNonCurrent),
        deferred_tax_liabilities_non_current: safeNumber(convertedStmt.deferredTaxLiabilitiesNonCurrent),
        other_non_current_liabilities: safeNumber(convertedStmt.otherNonCurrentLiabilities),
        total_non_current_liabilities: safeNumber(convertedStmt.totalNonCurrentLiabilities),
        other_liabilities: safeNumber(convertedStmt.otherLiabilities),
        capital_lease_obligations: safeNumber(convertedStmt.capitalLeaseObligations),
        total_liabilities: safeNumber(convertedStmt.totalLiabilities),
        preferred_stock: safeNumber(convertedStmt.preferredStock),
        common_stock: safeNumber(convertedStmt.commonStock),
        retained_earnings: safeNumber(convertedStmt.retainedEarnings),
        accumulated_other_comprehensive_income_loss: safeNumber(convertedStmt.accumulatedOtherComprehensiveIncomeLoss),
        other_total_stockholders_equity: safeNumber(convertedStmt.othertotalStockholdersEquity),
        total_stockholders_equity: safeNumber(convertedStmt.totalStockholdersEquity),
        total_equity: safeNumber(convertedStmt.totalEquity),
        total_liabilities_and_stockholders_equity: safeNumber(convertedStmt.totalLiabilitiesAndStockholdersEquity),
        minority_interest: safeNumber(convertedStmt.minorityInterest),
        total_liabilities_and_total_equity: safeNumber(convertedStmt.totalLiabilitiesAndTotalEquity),
        total_investments: safeNumber(convertedStmt.totalInvestments),
        total_debt: safeNumber(convertedStmt.totalDebt),
        net_debt: safeNumber(convertedStmt.netDebt)
    };
}

export function transformCashFlow(stmt: FMPCashFlowStatement, symbol: string, convertedStmt: FMPCashFlowStatement): CashFlowStatement {
    return {
        symbol,
        date: stmt.date,
        reported_currency: stmt.reportedCurrency,
        cik: stmt.cik,
        filling_date: stmt.fillingDate,
        accepted_date: stmt.acceptedDate,
        calendar_year: stmt.calendarYear,
        period: stmt.period,
        link: stmt.link,
        final_link: stmt.finalLink,
        net_income: safeNumber(convertedStmt.netIncome),
        depreciation_and_amortization: safeNumber(convertedStmt.depreciationAndAmortization),
        deferred_income_tax: safeNumber(convertedStmt.deferredIncomeTax),
        stock_based_compensation: safeNumber(convertedStmt.stockBasedCompensation),
        change_in_working_capital: safeNumber(convertedStmt.changeInWorkingCapital),
        accounts_receivables: safeNumber(convertedStmt.accountsReceivables),
        inventory: safeNumber(convertedStmt.inventory),
        accounts_payables: safeNumber(convertedStmt.accountsPayables),
        other_working_capital: safeNumber(convertedStmt.otherWorkingCapital),
        other_non_cash_items: safeNumber(convertedStmt.otherNonCashItems),
        net_cash_provided_by_operating_activities: safeNumber(convertedStmt.netCashProvidedByOperatingActivities),
        investments_in_property_plant_and_equipment: safeNumber(convertedStmt.investmentsInPropertyPlantAndEquipment),
        acquisitions_net: safeNumber(convertedStmt.acquisitionsNet),
        purchases_of_investments: safeNumber(convertedStmt.purchasesOfInvestments),
        sales_maturities_of_investments: safeNumber(convertedStmt.salesMaturitiesOfInvestments),
        other_investing_activities: safeNumber(convertedStmt.otherInvestingActivites),
        net_cash_used_for_investing_activities: safeNumber(convertedStmt.netCashUsedForInvestingActivites),
        debt_repayment: safeNumber(convertedStmt.debtRepayment),
        common_stock_issued: safeNumber(convertedStmt.commonStockIssued),
        common_stock_repurchased: safeNumber(convertedStmt.commonStockRepurchased),
        dividends_paid: safeNumber(convertedStmt.dividendsPaid),
        other_financing_activities: safeNumber(convertedStmt.otherFinancingActivites),
        net_cash_used_provided_by_financing_activities: safeNumber(convertedStmt.netCashUsedProvidedByFinancingActivities),
        effect_of_forex_changes_on_cash: safeNumber(convertedStmt.effectOfForexChangesOnCash),
        net_change_in_cash: safeNumber(convertedStmt.netChangeInCash),
        cash_at_end_of_period: safeNumber(convertedStmt.cashAtEndOfPeriod),
        cash_at_beginning_of_period: safeNumber(convertedStmt.cashAtBeginningOfPeriod),
        operating_cash_flow: safeNumber(convertedStmt.operatingCashFlow),
        capital_expenditure: safeNumber(convertedStmt.capitalExpenditure),
        free_cash_flow: safeNumber(convertedStmt.freeCashFlow)
    };
}
